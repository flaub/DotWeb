//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotWeb.Translator.Test.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Loops {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Loops() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DotWeb.Translator.Test.Resources.Loops", typeof(Loops).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.BreakInWhile = function(a) {
        ///	while (a &lt; 100) {
        ///		if (a == 12) {
        ///			System.Console.WriteLine$1(&quot;break&quot;);
        ///			break;
        ///		}
        ///		System.Console.WriteLine$1(&quot;else&quot;);
        ///		a = a - 1;
        ///	}
        ///	System.Console.WriteLine$0(a);
        ///};
        ///.
        /// </summary>
        internal static string BreakInWhile {
            get {
                return ResourceManager.GetString("BreakInWhile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.ComplexLoop = function() {
        ///	var i = 0;
        ///	System.Console.WriteLine$1(&quot;enter&quot;);
        ///	while (true) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if (i &lt; 10) {
        ///			System.Console.WriteLine$1(&quot;i &lt; 10&quot;);
        ///			if (i == 1) {
        ///				System.Console.WriteLine$1(&quot;i == 1&quot;);
        ///				break;
        ///			}
        ///			if (i == 2) {
        ///				System.Console.WriteLine$1(&quot;i == 2&quot;);
        ///				continue;
        ///			}
        ///			break;
        ///		}
        ///		System.Console.WriteLine$1(&quot;bottom&quot;);
        ///	}
        ///	System.Console.WriteLine$1(&quot;return&quot;);
        ///};
        ///.
        /// </summary>
        internal static string ComplexLoop {
            get {
                return ResourceManager.GetString("ComplexLoop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.ComplexNestedLoop = function() {
        ///	var i = 0;
        ///	System.Console.WriteLine$1(&quot;enter&quot;);
        ///	while (true) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if (i &lt; 10) {
        ///			System.Console.WriteLine$1(&quot;i &lt; 10&quot;);
        ///			if (i == 1) {
        ///				System.Console.WriteLine$1(&quot;i == 1&quot;);
        ///				break;
        ///			}
        ///			if (i == 2) {
        ///				do {
        ///					System.Console.WriteLine$1(&quot;inner loop&quot;);
        ///				} while (i &lt; 4);
        ///				break;
        ///			}
        ///			System.Console.WriteLine$1(&quot;bottom&quot;);
        ///		}
        ///	}
        ///	System.Console.WriteLine$1(&quot;return&quot;);
        ///};
        ///.
        /// </summary>
        internal static string ComplexNestedLoop {
            get {
                return ResourceManager.GetString("ComplexNestedLoop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.EndlessLoop = function() {
        ///	System.Console.WriteLine$1(&quot;enter&quot;);
        ///	while (true) {
        ///		System.Console.WriteLine$1(&quot;loop&quot;);
        ///	}
        ///};
        ///.
        /// </summary>
        internal static string EndlessLoop {
            get {
                return ResourceManager.GetString("EndlessLoop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.MultiReturns = function() {
        ///	var i = 0;
        ///	System.Console.WriteLine$1(&quot;enter&quot;);
        ///	while (i &lt; 100) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if (i == 10) {
        ///			System.Console.WriteLine$1(&quot;return1&quot;);
        ///			return;
        ///		}
        ///		if (i == 50) {
        ///			System.Console.WriteLine$1(&quot;break&quot;);
        ///			break;
        ///		}
        ///		System.Console.WriteLine$1(&quot;bottom&quot;);
        ///	}
        ///	System.Console.WriteLine$1(&quot;return2&quot;);
        ///};
        ///.
        /// </summary>
        internal static string MultiReturns {
            get {
                return ResourceManager.GetString("MultiReturns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.MultiReturns2 = function() {
        ///	var i = 0;
        ///	System.Console.WriteLine$1(&quot;enter&quot;);
        ///	while (i &lt; 100) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if (i &gt; 10) {
        ///			System.Console.WriteLine$1(&quot;return1&quot;);
        ///			return;
        ///		}
        ///		if (i &lt; 50) {
        ///			System.Console.WriteLine$1(&quot;return2&quot;);
        ///			return;
        ///		}
        ///		System.Console.WriteLine$1(&quot;bottom&quot;);
        ///	}
        ///	System.Console.WriteLine$1(&quot;return2&quot;);
        ///};
        ///.
        /// </summary>
        internal static string MultiReturns2 {
            get {
                return ResourceManager.GetString("MultiReturns2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.NestedDoWhile = function(a) {
        ///	while (a &lt; 100) {
        ///		do {
        ///			a = a * 10;
        ///		} while (a &lt; 10);
        ///		a = a + 2;
        ///	}
        ///};
        ///.
        /// </summary>
        internal static string NestedDoWhile {
            get {
                return ResourceManager.GetString("NestedDoWhile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.SimpleDoWhile = function(a) {
        ///	System.Console.WriteLine$0(a);
        ///	do {
        ///		a = a + 1;
        ///		System.Console.WriteLine$0(a);
        ///	} while (a &lt; 100);
        ///	System.Console.WriteLine$0(a);
        ///};
        ///.
        /// </summary>
        internal static string SimpleDoWhile {
            get {
                return ResourceManager.GetString("SimpleDoWhile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.SimpleFor = function(a) {
        ///	var i = 0;
        ///	while (i &lt; 10) {
        ///		a = a + 1;
        ///		i = i + 1;
        ///	}
        ///};
        ///.
        /// </summary>
        internal static string SimpleFor {
            get {
                return ResourceManager.GetString("SimpleFor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.SimpleWhile = function(a) {
        ///	System.Console.WriteLine$0(a);
        ///	while (a &lt; 100) {
        ///		a = a + 1;
        ///		System.Console.WriteLine$0(a);
        ///	}
        ///	System.Console.WriteLine$0(a);
        ///};
        ///.
        /// </summary>
        internal static string SimpleWhile {
            get {
                return ResourceManager.GetString("SimpleWhile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright 2010, Frank Laub
        ///// 
        ///// This file is part of DotWeb.
        ///// 
        ///// DotWeb is free software: you can redistribute it and/or modify
        ///// it under the terms of the GNU General Public License as published by
        ///// the Free Software Foundation, either version 3 of the License, or
        ///// (at your option) any later version.
        ///// 
        ///// DotWeb is distributed in the hope that it will be useful,
        ///// but WITHOUT ANY WARRANTY; without even the implied warranty of
        ///// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Source {
            get {
                return ResourceManager.GetString("Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.WhileBreak = function() {
        ///	var i = 0;
        ///	while (true) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if (i == 10) {
        ///			break;
        ///		}
        ///		System.Console.WriteLine$1(&quot;loop&quot;);
        ///		i = i + 1;
        ///	}
        ///	System.Console.WriteLine$1(&quot;break&quot;);
        ///	System.Console.WriteLine$1(&quot;exit&quot;);
        ///};
        ///.
        /// </summary>
        internal static string WhileBreak {
            get {
                return ResourceManager.GetString("WhileBreak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.WhileBreakBreak = function() {
        ///	var i = 0;
        ///	while (true) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if (i == 10) {
        ///			System.Console.WriteLine$1(&quot;break1&quot;);
        ///			break;
        ///		}
        ///		if (i == 5) {
        ///			System.Console.WriteLine$1(&quot;break2&quot;);
        ///			break;
        ///		}
        ///		System.Console.WriteLine$1(&quot;bottom&quot;);
        ///		i = i + 1;
        ///	}
        ///	System.Console.WriteLine$1(&quot;exit&quot;);
        ///};
        ///.
        /// </summary>
        internal static string WhileBreakBreak {
            get {
                return ResourceManager.GetString("WhileBreakBreak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.WhileBreakContinue = function() {
        ///	var i = 0;
        ///	while (true) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if (i == 10) {
        ///			System.Console.WriteLine$1(&quot;continue&quot;);
        ///			continue;
        ///		}
        ///		if (i == 20) {
        ///			break;
        ///		}
        ///		System.Console.WriteLine$1(&quot;bottom&quot;);
        ///		i = i + 1;
        ///	}
        ///	System.Console.WriteLine$1(&quot;break&quot;);
        ///	System.Console.WriteLine$1(&quot;exit&quot;);
        ///};
        ///.
        /// </summary>
        internal static string WhileBreakContinue {
            get {
                return ResourceManager.GetString("WhileBreakContinue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.WhileCondBreak = function() {
        ///	var i = 0;
        ///	while (i &lt; 9) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if (i == 10) {
        ///			System.Console.WriteLine$1(&quot;break&quot;);
        ///			break;
        ///		}
        ///		System.Console.WriteLine$1(&quot;loop&quot;);
        ///		i = i + 1;
        ///	}
        ///	System.Console.WriteLine$1(&quot;exit&quot;);
        ///};
        ///.
        /// </summary>
        internal static string WhileCondBreak {
            get {
                return ResourceManager.GetString("WhileCondBreak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.WhileCondContinue = function() {
        ///	var i = 0;
        ///	while (i &lt; 9) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if (i == 10) {
        ///			System.Console.WriteLine$1(&quot;continue&quot;);
        ///			continue;
        ///		}
        ///		System.Console.WriteLine$1(&quot;bottom&quot;);
        ///		i = i + 1;
        ///	}
        ///	System.Console.WriteLine$1(&quot;exit&quot;);
        ///};
        ///.
        /// </summary>
        internal static string WhileCondContinue {
            get {
                return ResourceManager.GetString("WhileCondContinue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.WhileContinue = function() {
        ///	var i = 0;
        ///	while (true) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if (i == 10) {
        ///			System.Console.WriteLine$1(&quot;continue&quot;);
        ///			continue;
        ///		}
        ///		System.Console.WriteLine$1(&quot;bottom&quot;);
        ///		i = i + 1;
        ///	}
        ///};
        ///.
        /// </summary>
        internal static string WhileContinue {
            get {
                return ResourceManager.GetString("WhileContinue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.WhileIfLessOrLessBreak = function(x) {
        ///	System.Console.WriteLine$1(&quot;enter&quot;);
        ///	var p = 0;
        ///	while (true) {
        ///		System.Console.WriteLine$1(&quot;top&quot;);
        ///		if ((x &gt;= 0) &amp;&amp; (9 &gt;= x)) {
        ///			System.Console.WriteLine$1(&quot;bottom&quot;);
        ///			p = p + 1;
        ///		}
        ///		else {
        ///			break;
        ///		}
        ///	}
        ///	System.Console.WriteLine$1(&quot;exit&quot;);
        ///};
        ///.
        /// </summary>
        internal static string WhileIfLessOrLessBreak {
            get {
                return ResourceManager.GetString("WhileIfLessOrLessBreak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loops.prototype.WhileTryCatchFinally = function(x) {
        ///	System.Console.WriteLine$1(&quot;enter&quot;);
        ///	while (x &lt; 10) {
        ///		try {
        ///			System.Console.WriteLine$1(&quot;try&quot;);
        ///		}
        ///		catch (__ex__) {
        ///			if (__ex__ instanceof System.NotImplementedException) {
        ///				System.Console.WriteLine$1(&quot;continue&quot;);
        ///				continue;
        ///			}
        ///			else if (__ex__) {
        ///				System.Console.WriteLine$1(&quot;break&quot;);
        ///				break;
        ///			}
        ///		}
        ///		finally {
        ///			System.Console.WriteLine$1(&quot;finally&quot;);
        ///		}
        ///	}
        ///	System.Console.WriteLine$1(&quot;exit&quot;);
        ///};
        ///.
        /// </summary>
        internal static string WhileTryCatchFinally {
            get {
                return ResourceManager.GetString("WhileTryCatchFinally", resourceCulture);
            }
        }
    }
}
