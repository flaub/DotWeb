//
// IMetadataVisitor.cs
//
// Author:
//   Jb Evain (jbevain@gmail.com)
//
// Generated by /CodeGen/cecil-gen.rb do not edit
// <%=Time.now%>
//
// (C) 2005 Jb Evain
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

namespace Mono.Cecil.Metadata {

	public interface IMetadataVisitor {
		void VisitMetadataRoot (MetadataRoot root);
		void VisitMetadataRootHeader (MetadataRoot.MetadataRootHeader header);
		void VisitMetadataStreamCollection (MetadataStreamCollection streams);
		void VisitMetadataStream (MetadataStream stream);
		void VisitMetadataStreamHeader (MetadataStream.MetadataStreamHeader header);
		void VisitGuidHeap (GuidHeap heap);
		void VisitStringsHeap (StringsHeap heap);
		void VisitTablesHeap (TablesHeap heap);
		void VisitBlobHeap (BlobHeap heap);
		void VisitUserStringsHeap (UserStringsHeap heap);

		void TerminateMetadataRoot (MetadataRoot root);
	}

	public interface IMetadataTableVisitor {
		void VisitTableCollection (TableCollection coll);

<% $tables.each { |table| %>		void Visit<%=table.table_name%> (<%=table.table_name%> table);
<% } %>
		void TerminateTableCollection (TableCollection coll);
		IMetadataRowVisitor GetRowVisitor();
}

	public interface IMetadataRowVisitor {
		void VisitRowCollection (RowCollection coll);

<% $tables.each { |table| %>		void Visit<%=table.row_name%> (<%=table.row_name%> row);
<% } %>
		void TerminateRowCollection (RowCollection coll);
	}
}
